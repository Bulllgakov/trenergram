import React, { useState } from 'react';
import { Calendar, Clock, User, X, XCircle, MessageCircle } from 'lucide-react';
import api from '../services/api';
import './ClientBookingManager.css';

const ClientBookingManager = ({ booking, clientId, onClose, onUpdate }) => {
  const [showCancelForm, setShowCancelForm] = useState(false);
  const [cancellationReason, setCancellationReason] = useState('');
  const [loading, setLoading] = useState(false);

  const handleCancel = async () => {
    if (!cancellationReason.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã');
      return;
    }

    setLoading(true);
    try {
      await api.cancelBooking(booking.id, clientId, cancellationReason);
      alert('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞');
      if (onUpdate) onUpdate();
      onClose();
    } catch (error) {
      console.error('Error cancelling booking:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setLoading(false);
    }
  };

  const formatDateTime = (datetime) => {
    const date = new Date(datetime.replace('Z', ''));
    return date.toLocaleString('ru-RU', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusColor = (status) => {
    switch(status.toLowerCase()) {
      case 'confirmed': return '#34c759';
      case 'pending': return '#ff9500';
      case 'cancelled': return '#ff3b30';
      case 'completed': return '#007aff';
      default: return '#8e8e93';
    }
  };

  const getStatusText = (status) => {
    switch(status.toLowerCase()) {
      case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–æ';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      default: return status;
    }
  };

  const isUpcoming = new Date(booking.datetime.replace('Z', '')) > new Date();
  const canCancel = isUpcoming && booking.status.toLowerCase() !== 'cancelled' && booking.status.toLowerCase() !== 'completed';

  // Calculate if cancellation is allowed (24 hours before)
  const hoursBeforeBooking = (new Date(booking.datetime.replace('Z', '')) - new Date()) / (1000 * 60 * 60);
  const canCancelWithoutPenalty = hoursBeforeBooking > 24;

  return (
    <div className="client-booking-manager-overlay">
      <div className="client-booking-manager">
        <div className="booking-header">
          <h2>–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏</h2>
          <button className="close-btn" onClick={onClose}>
            <X size={20} />
          </button>
        </div>

        <div className="booking-details">
          <div className="trainer-info">
            <div className="trainer-avatar">
              <User size={24} />
            </div>
            <div className="trainer-name">
              <h3>{booking.trainer_name}</h3>
              {booking.trainer_telegram_username && (
                <a
                  href={`https://t.me/${booking.trainer_telegram_username}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="trainer-link"
                >
                  @{booking.trainer_telegram_username}
                </a>
              )}
            </div>
          </div>

          <div className="booking-info-list">
            <div className="info-item">
              <Calendar size={18} />
              <span>{formatDateTime(booking.datetime)}</span>
            </div>

            <div className="info-item">
              <Clock size={18} />
              <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {booking.duration} –º–∏–Ω</span>
            </div>

            {booking.price && (
              <div className="info-item">
                <span>üí∞</span>
                <span>{booking.price} ‚ÇΩ</span>
              </div>
            )}

            <div className="info-item">
              <div
                className="status-badge"
                style={{ backgroundColor: getStatusColor(booking.status) }}
              >
                {getStatusText(booking.status)}
              </div>
            </div>
          </div>

          {booking.notes && (
            <div className="booking-notes">
              <h4>–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</h4>
              <p>{booking.notes}</p>
            </div>
          )}

          {booking.cancellation_reason && (
            <div className="cancellation-info">
              <h4>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</h4>
              <p>{booking.cancellation_reason}</p>
            </div>
          )}
        </div>

        <div className="booking-actions">
          {canCancel && (
            <>
              {!canCancelWithoutPenalty && (
                <div className="warning-message">
                  ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ—Ç–º–µ–Ω–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —à—Ç—Ä–∞—Ñ—É
                </div>
              )}

              {!showCancelForm ? (
                <button
                  className="action-btn cancel"
                  onClick={() => setShowCancelForm(true)}
                  disabled={loading}
                >
                  <XCircle size={18} />
                  –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
                </button>
              ) : (
                <div className="cancel-form">
                  <h3>–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏</h3>
                  <div className="form-group">
                    <label>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</label>
                    <textarea
                      value={cancellationReason}
                      onChange={(e) => setCancellationReason(e.target.value)}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã, –∑–∞–±–æ–ª–µ–ª(–∞)..."
                      rows={3}
                    />
                  </div>
                  <div className="cancel-actions">
                    <button
                      className="cancel-btn secondary"
                      onClick={() => {
                        setShowCancelForm(false);
                        setCancellationReason('');
                      }}
                      disabled={loading}
                    >
                      –ù–∞–∑–∞–¥
                    </button>
                    <button
                      className="cancel-btn danger"
                      onClick={handleCancel}
                      disabled={loading || !cancellationReason.trim()}
                    >
                      {loading ? '–û—Ç–º–µ–Ω—è–µ–º...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É'}
                    </button>
                  </div>
                </div>
              )}
            </>
          )}

          {booking.trainer_telegram_username && (
            <a
              href={`https://t.me/${booking.trainer_telegram_username}`}
              target="_blank"
              rel="noopener noreferrer"
              className="action-btn contact"
            >
              <MessageCircle size={18} />
              –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º
            </a>
          )}
        </div>

        {isUpcoming && booking.status.toLowerCase() === 'confirmed' && (
          <div className="booking-tips">
            <h4>–ü–∞–º—è—Ç–∫–∞:</h4>
            <ul>
              <li>–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞</li>
              <li>–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É –∏ –≤–æ–¥—É</li>
              <li>–ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ</li>
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

export default ClientBookingManager;