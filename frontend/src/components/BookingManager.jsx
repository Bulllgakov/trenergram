import React, { useState } from 'react';
import { Calendar, Clock, User, X, Check, XCircle, RefreshCw } from 'lucide-react';
import api from '../services/api';
import './BookingManager.css';

const BookingManager = ({ booking, trainerId, onClose, onUpdate }) => {
  const [showReschedule, setShowReschedule] = useState(false);
  const [newDate, setNewDate] = useState(booking.datetime.split('T')[0]);
  const [newTime, setNewTime] = useState(booking.datetime.split('T')[1].substring(0, 5));
  const [cancellationReason, setCancellationReason] = useState('');
  const [loading, setLoading] = useState(false);

  const handleConfirm = async () => {
    setLoading(true);
    try {
      await api.updateBooking(booking.id, trainerId, {
        status: 'CONFIRMED'
      });
      alert('–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
      if (onUpdate) onUpdate();
      onClose();
    } catch (error) {
      console.error('Error confirming booking:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = async () => {
    if (!cancellationReason.trim()) {
      alert('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã');
      return;
    }

    setLoading(true);
    try {
      await api.updateBooking(booking.id, trainerId, {
        status: 'CANCELLED',
        cancellation_reason: cancellationReason
      });
      alert('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞');
      if (onUpdate) onUpdate();
      onClose();
    } catch (error) {
      console.error('Error cancelling booking:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleReschedule = async () => {
    const newDateTime = `${newDate}T${newTime}:00`;

    setLoading(true);
    try {
      await api.updateBooking(booking.id, trainerId, {
        datetime: newDateTime
      });
      alert('–ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞!');
      if (onUpdate) onUpdate();
      onClose();
    } catch (error) {
      console.error('Error rescheduling booking:', error);
      if (error.response?.data?.detail === 'Time slot already booked') {
        alert('–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!');
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏');
      }
    } finally {
      setLoading(false);
    }
  };

  const formatDateTime = (datetime) => {
    const date = new Date(datetime);
    return date.toLocaleString('ru-RU', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusColor = (status) => {
    switch(status.toLowerCase()) {
      case 'confirmed': return '#34c759';
      case 'pending': return '#ff9500';
      case 'cancelled': return '#ff3b30';
      case 'completed': return '#007aff';
      default: return '#8e8e93';
    }
  };

  const getStatusText = (status) => {
    switch(status.toLowerCase()) {
      case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–æ';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      default: return status;
    }
  };

  return (
    <div className="booking-manager-overlay">
      <div className="booking-manager">
        <div className="booking-header">
          <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é</h2>
          <button className="close-btn" onClick={onClose}>
            <X size={20} />
          </button>
        </div>

        <div className="booking-details">
          <div className="detail-item">
            <User size={18} />
            <span>{booking.client_name}</span>
          </div>
          <div className="detail-item">
            <Calendar size={18} />
            <span>{formatDateTime(booking.datetime)}</span>
          </div>
          {booking.price && (
            <div className="detail-item">
              <span>üí∞</span>
              <span>{booking.price} ‚ÇΩ</span>
            </div>
          )}
          <div className="detail-item">
            <div
              className="status-badge"
              style={{ backgroundColor: getStatusColor(booking.status) }}
            >
              {getStatusText(booking.status)}
            </div>
          </div>
        </div>

        {booking.notes && (
          <div className="booking-notes">
            <h3>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</h3>
            <p>{booking.notes}</p>
          </div>
        )}

        {booking.status.toLowerCase() === 'pending' && (
          <div className="booking-actions">
            <button
              className="action-btn confirm"
              onClick={handleConfirm}
              disabled={loading}
            >
              <Check size={18} />
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
            </button>
            <button
              className="action-btn reschedule"
              onClick={() => setShowReschedule(!showReschedule)}
              disabled={loading}
            >
              <RefreshCw size={18} />
              –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏
            </button>
            <button
              className="action-btn cancel"
              onClick={() => setCancellationReason('') || setShowReschedule(false)}
              disabled={loading}
            >
              <XCircle size={18} />
              –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          </div>
        )}

        {booking.status.toLowerCase() === 'confirmed' && (
          <div className="booking-actions">
            <button
              className="action-btn reschedule"
              onClick={() => setShowReschedule(!showReschedule)}
              disabled={loading}
            >
              <RefreshCw size={18} />
              –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏
            </button>
            <button
              className="action-btn cancel"
              onClick={() => setCancellationReason('') || setShowReschedule(false)}
              disabled={loading}
            >
              <XCircle size={18} />
              –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          </div>
        )}

        {showReschedule && (
          <div className="reschedule-form">
            <h3>–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏</h3>
            <div className="form-group">
              <label>–ù–æ–≤–∞—è –¥–∞—Ç–∞:</label>
              <input
                type="date"
                value={newDate}
                onChange={(e) => setNewDate(e.target.value)}
                min={new Date().toISOString().split('T')[0]}
              />
            </div>
            <div className="form-group">
              <label>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:</label>
              <input
                type="time"
                value={newTime}
                onChange={(e) => setNewTime(e.target.value)}
              />
            </div>
            <button
              className="submit-btn"
              onClick={handleReschedule}
              disabled={loading}
            >
              {loading ? '–ü–µ—Ä–µ–Ω–æ—Å–∏–º...' : '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å'}
            </button>
          </div>
        )}

        {cancellationReason !== undefined && booking.status.toLowerCase() !== 'cancelled' && !showReschedule && (
          <div className="cancel-form">
            <h3>–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏</h3>
            <div className="form-group">
              <label>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</label>
              <textarea
                value={cancellationReason}
                onChange={(e) => setCancellationReason(e.target.value)}
                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏..."
                rows={3}
              />
            </div>
            <div className="cancel-actions">
              <button
                className="cancel-btn secondary"
                onClick={() => setCancellationReason('')}
              >
                –ù–∞–∑–∞–¥
              </button>
              <button
                className="cancel-btn danger"
                onClick={handleCancel}
                disabled={loading || !cancellationReason.trim()}
              >
                {loading ? '–û—Ç–º–µ–Ω—è–µ–º...' : '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'}
              </button>
            </div>
          </div>
        )}

        {booking.cancellation_reason && (
          <div className="cancellation-info">
            <h3>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</h3>
            <p>{booking.cancellation_reason}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default BookingManager;