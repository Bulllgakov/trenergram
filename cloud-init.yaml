#cloud-config
# Cloud-init configuration for Trenergram on TimeWeb VDS

# Обновление системы
package_update: true
package_upgrade: true

# Установка необходимых пакетов
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - git
  - ufw
  - nginx
  - python3-pip
  - python3-venv
  - postgresql
  - postgresql-contrib
  - redis-server
  - supervisor
  - htop
  - nano
  - wget

# Создание пользователя для деплоя
users:
  - name: deploy
    groups: sudo, docker
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldHS9ywpW7HrKw49uh2H3 github-actions

# Выполнение команд при первом запуске
runcmd:
  # Настройка firewall
  - ufw allow 22/tcp
  - ufw allow 80/tcp
  - ufw allow 443/tcp
  - ufw allow 8000/tcp
  - ufw --force enable

  # Установка Docker
  - curl -fsSL https://get.docker.com -o get-docker.sh
  - sh get-docker.sh
  - usermod -aG docker deploy
  - systemctl enable docker
  - systemctl start docker

  # Установка Docker Compose
  - curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose

  # Настройка PostgreSQL
  - sudo -u postgres psql -c "CREATE DATABASE trenergram;"
  - sudo -u postgres psql -c "CREATE USER trenergram WITH PASSWORD 'TrenerGram2024Strong';"
  - sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE trenergram TO trenergram;"
  - sudo -u postgres psql -c "ALTER DATABASE trenergram OWNER TO trenergram;"

  # Настройка Redis
  - systemctl enable redis-server
  - systemctl start redis-server

  # Создание директории проекта
  - mkdir -p /opt/trenergram
  - chown -R deploy:deploy /opt/trenergram

  # Клонирование репозитория
  - sudo -u deploy git clone https://github.com/Bulllgakov/trenergram.git /opt/trenergram

  # Создание .env файла
  - |
    cat > /opt/trenergram/.env << 'EOF'
    # Telegram Bot
    BOT_TOKEN=8229544461:AAFr-MA466IKP_egh448meK6LLKWEZagofI
    BOT_USERNAME=trenergram_bot

    # Database
    DATABASE_URL=postgresql+asyncpg://trenergram:TrenerGram2024Strong@localhost:5432/trenergram

    # Redis
    REDIS_URL=redis://localhost:6379/0
    CELERY_BROKER_URL=redis://localhost:6379/1
    CELERY_RESULT_BACKEND=redis://localhost:6379/2

    # Security
    SECRET_KEY=your-secret-key-generate-with-openssl-rand-hex-32
    ALGORITHM=HS256
    ACCESS_TOKEN_EXPIRE_MINUTES=10080

    # Environment
    ENVIRONMENT=production
    DEBUG=False

    # Domain
    DOMAIN=trenergram.ru
    WEBAPP_URL=https://trenergram.ru

    # Admin
    SUPER_ADMIN_EMAIL=admin@trenergram.ru
    SUPER_ADMIN_PASSWORD=changeme
    EOF

  - chown deploy:deploy /opt/trenergram/.env

  # Создание docker-compose.yml
  - |
    cat > /opt/trenergram/docker-compose.yml << 'EOF'
    version: '3.8'

    services:
      web:
        build: .
        container_name: trenergram_web
        ports:
          - "8000:8000"
        env_file:
          - .env
        volumes:
          - ./backend:/app/backend
        restart: unless-stopped
        networks:
          - trenergram_network

      bot:
        build: .
        container_name: trenergram_bot
        command: python -m app.bot.main
        env_file:
          - .env
        volumes:
          - ./backend:/app/backend
        restart: unless-stopped
        networks:
          - trenergram_network

    networks:
      trenergram_network:
        driver: bridge
    EOF

  - chown deploy:deploy /opt/trenergram/docker-compose.yml

  # Настройка Nginx
  - |
    cat > /etc/nginx/sites-available/trenergram << 'EOF'
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        location / {
            proxy_pass http://localhost:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /health {
            proxy_pass http://localhost:8000/health;
            access_log off;
        }
    }
    EOF

  - ln -sf /etc/nginx/sites-available/trenergram /etc/nginx/sites-enabled/default
  - systemctl reload nginx

  # Создание скрипта деплоя
  - |
    cat > /home/deploy/deploy.sh << 'EOF'
    #!/bin/bash
    cd /opt/trenergram
    git pull origin main
    docker-compose build --no-cache
    docker-compose down
    docker-compose up -d
    echo "Deployment completed at $(date)" >> /var/log/trenergram-deploy.log
    EOF

  - chmod +x /home/deploy/deploy.sh
  - chown deploy:deploy /home/deploy/deploy.sh

  # Первый запуск приложения
  - cd /opt/trenergram && sudo -u deploy docker-compose build
  - cd /opt/trenergram && sudo -u deploy docker-compose up -d

  # Создание systemd сервиса для автозапуска
  - |
    cat > /etc/systemd/system/trenergram.service << 'EOF'
    [Unit]
    Description=Trenergram Application
    Requires=docker.service
    After=docker.service

    [Service]
    Type=oneshot
    RemainAfterExit=yes
    WorkingDirectory=/opt/trenergram
    ExecStart=/usr/local/bin/docker-compose up -d
    ExecStop=/usr/local/bin/docker-compose down
    User=deploy
    Group=deploy

    [Install]
    WantedBy=multi-user.target
    EOF

  - systemctl daemon-reload
  - systemctl enable trenergram.service

  # Генерация SECRET_KEY
  - SECRET_KEY=$(openssl rand -hex 32)
  - sed -i "s/your-secret-key-generate-with-openssl-rand-hex-32/$SECRET_KEY/" /opt/trenergram/.env

  # Финальное сообщение в лог
  - echo "Trenergram server setup completed!" >> /var/log/cloud-init-output.log
  - echo "Server IP: $(curl -s ifconfig.me)" >> /var/log/cloud-init-output.log
  - echo "Check application at http://$(curl -s ifconfig.me):8000/health" >> /var/log/cloud-init-output.log

# Вывод финальной информации
final_message: |
  ========================================
  Trenergram Server Ready!
  ========================================
  Server IP: $PUBLIC_IPV4

  Check application: http://$PUBLIC_IPV4/health

  SSH access: ssh deploy@$PUBLIC_IPV4

  Logs:
  - Application: docker logs trenergram_web
  - Bot: docker logs trenergram_bot

  Next steps:
  1. Configure domain DNS
  2. Setup SSL with certbot
  3. Configure GitHub Actions secrets
  ========================================