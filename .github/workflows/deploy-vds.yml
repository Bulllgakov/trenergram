name: Deploy to VDS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to VDS via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VDS_HOST || '81.200.157.102' }}
        username: ${{ secrets.VDS_USER || 'root' }}
        key: ${{ secrets.VDS_SSH_KEY }}
        port: ${{ secrets.VDS_PORT || 22 }}
        script: |
          # Navigate to project directory
          cd /opt/trenergram

          # Clean any local changes to avoid conflicts
          git reset --hard
          git clean -fd

          # Pull latest changes
          git pull origin main

          # Remove all Python cache files to ensure fresh code
          find . -type f -name '*.pyc' -delete
          find . -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true

          # Rebuild and restart Docker containers
          docker-compose down
          docker-compose build --no-cache backend bot
          docker-compose up -d

          # Remove old incorrect app directory if exists
          if [ -d "/var/www/trenergram/app" ]; then
            rm -rf /var/www/trenergram/app
          fi

          # Clean up old backend structure (remove leftover app folder)
          if [ -d "backend/app" ]; then
            echo "Removing old backend/app structure"
            rm -rf backend/app
          fi

          # Deploy webapp files to correct location
          if [ -d "webapp" ]; then
            echo "Deploying webapp files to /var/www/trenergram/"
            # Ensure directory exists
            mkdir -p /var/www/trenergram
            # Copy webapp directory with contents
            cp -r webapp /var/www/trenergram/
          fi

          # Update nginx config if exists
          if [ -f "nginx-ssl.conf" ]; then
            cp nginx-ssl.conf /etc/nginx/sites-available/trenergram
            nginx -t && nginx -s reload
          fi

          # Apply database migrations
          docker-compose exec -T backend python apply_migrations.py || echo "Migrations applied or not needed"

          # Check container status
          docker-compose ps

          echo "âœ… Deployment completed successfully!"