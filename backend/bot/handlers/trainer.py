from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes

from db.base import async_session
from services.trainer import TrainerService
from models.enums import BookingStatus


async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show trainer's schedule for today"""
    telegram_id = str(update.effective_user.id)

    async with async_session() as db:
        schedule = await TrainerService.get_today_schedule(db, telegram_id)

    if not schedule:
        await update.message.reply_text(
            "üìÖ *–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
            parse_mode='Markdown'
        )
        return

    message = "üìÖ *–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"

    for item in schedule:
        status_emoji = "‚úÖ" if item['status'] == BookingStatus.CONFIRMED else "‚è≥"
        message += f"{item['time']} - {item['client_name']} {status_emoji}\n"

    message += "\n‚úÖ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n‚è≥ - –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"

    await update.message.reply_text(message, parse_mode='Markdown')


async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show clients for today"""
    telegram_id = str(update.effective_user.id)

    async with async_session() as db:
        clients = await TrainerService.get_today_clients(db, telegram_id)

    if not clients:
        await update.message.reply_text(
            "üë• *–ö–ª–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
            parse_mode='Markdown'
        )
        return

    message = "üë• *–ö–ª–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
    for i, client in enumerate(clients, 1):
        message += f"{i}. {client['time']} - {client['name']}\n"

    message += f"\n–í—Å–µ–≥–æ: {len(clients)} –∫–ª–∏–µ–Ω—Ç(–æ–≤)"

    await update.message.reply_text(message, parse_mode='Markdown')


async def tomorrow_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show clients for tomorrow"""
    telegram_id = str(update.effective_user.id)

    async with async_session() as db:
        clients = await TrainerService.get_tomorrow_clients(db, telegram_id)

    if not clients:
        await update.message.reply_text(
            "üë• *–ö–ª–∏–µ–Ω—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",
            parse_mode='Markdown'
        )
        return

    message = "üë• *–ö–ª–∏–µ–Ω—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞*\n\n"
    for i, client in enumerate(clients, 1):
        message += f"{i}. {client['time']} - {client['name']}\n"

    message += f"\n–í—Å–µ–≥–æ: {len(clients)} –∫–ª–∏–µ–Ω—Ç(–æ–≤)"

    await update.message.reply_text(message, parse_mode='Markdown')


async def my_link_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show trainer's personal link"""
    trainer_id = update.effective_user.id
    trainer_link = f"https://t.me/{context.bot.username}?start=trainer_{trainer_id}"

    await update.message.reply_text(
        "üîó *–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞*\n\n"
        f"`{trainer_link}`\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏.\n"
        "–ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ –≤–∞–º.",
        parse_mode='Markdown'
    )


async def book_client_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start booking a client process"""
    await update.message.reply_text(
        "üìù *–ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ "
        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å' –≤ Mini App.",
        parse_mode='Markdown'
    )


async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show trainer settings"""
    await update.message.reply_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ Mini App –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º\n"
        "‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞\n"
        "‚Ä¢ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        parse_mode='Markdown'
    )


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show trainer statistics"""
    telegram_id = str(update.effective_user.id)

    async with async_session() as db:
        stats = await TrainerService.get_trainer_stats(db, telegram_id)

    await update.message.reply_text(
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"*–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:*\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['month_completed']}\n"
        f"‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['month_cancelled']}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['month_new_clients']}\n"
        f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats['month_revenue']:,}‚ÇΩ\n\n"
        f"*–í—Å–µ–≥–æ:*\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['total_clients']}\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_completed']}",
        parse_mode='Markdown'
    )


async def my_club_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show trainer's club info"""
    telegram_id = str(update.effective_user.id)

    async with async_session() as db:
        club_info = await TrainerService.get_trainer_club(db, telegram_id)

    if not club_info:
        await update.message.reply_text(
            "üè¢ *–í–∞—à –∫–ª—É–±*\n\n"
            "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–ª—É–±—É. –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∫–∞–∫ —á–∞—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä.",
            parse_mode='Markdown'
        )
        return

    await update.message.reply_text(
        f"üè¢ *–í–∞—à –∫–ª—É–±*\n\n"
        f"*{club_info['name']}*\n"
        f"üìç {club_info['address'] or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìû {club_info['phone'] or '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚è∞ {club_info['working_hours']}\n\n"
        f"–¢–∞—Ä–∏—Ñ –∫–ª—É–±–∞: {club_info['tariff'].title()}\n"
        f"–¢—Ä–µ–Ω–µ—Ä–æ–≤ –≤ –∫–ª—É–±–µ: {club_info['trainer_count']}",
        parse_mode='Markdown'
    )