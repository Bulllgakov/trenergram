import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

from app.core.config import settings
from app.bot.handlers import registration, trainer, client, common, webapp
from app.bot.utils import keyboards

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    user = update.effective_user
    args = context.args

    # Check if user is already registered
    from app.services.registration import get_user_by_telegram_id
    existing_user = get_user_by_telegram_id(str(user.id))

    # Check if user came from a specific link
    if args:
        source = args[0]
        if source.startswith("trainer_"):
            # User came from trainer's link
            trainer_id = source.replace("trainer_", "")

            # If user exists as a client, show their dashboard
            if existing_user and existing_user.role == "client":
                from telegram import WebAppInfo
                keyboard = [
                    [InlineKeyboardButton(
                        "üìÖ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                        web_app=WebAppInfo(url=f"https://trenergram.ru/app/client/{user.id}")
                    )],
                    [InlineKeyboardButton(
                        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                        web_app=WebAppInfo(url=f"https://trenergram.ru/app/client/{user.id}/settings")
                    )]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return

            # Start client registration
            await registration.start_client_registration(update, context, trainer_id)
            return

        elif source.startswith("club_"):
            # User came from club's QR code
            club_qr = source.replace("club_", "")
            await registration.show_club_info(update, context, club_qr)
            return

    # If user is already registered, show their interface
    if existing_user:
        if existing_user.role == "trainer":
            from telegram import WebAppInfo
            keyboard = [
                [InlineKeyboardButton(
                    "üì± –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞",
                    web_app=WebAppInfo(url=f"https://trenergram.ru/app/trainer/{user.id}")
                )],
                [InlineKeyboardButton("üìé –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="copy_link")],
                [InlineKeyboardButton(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    web_app=WebAppInfo(url=f"https://trenergram.ru/app/trainer/{user.id}/settings")
                )]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {existing_user.name}! üëã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
        elif existing_user.role == "client":
            from telegram import WebAppInfo
            keyboard = [
                [InlineKeyboardButton(
                    "üìÖ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                    web_app=WebAppInfo(url=f"https://trenergram.ru/app/client/{user.id}")
                )],
                [InlineKeyboardButton(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    web_app=WebAppInfo(url=f"https://trenergram.ru/app/client/{user.id}/settings")
                )]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {existing_user.name}! üëã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

    # Regular start - ask for role
    keyboard = [
        [
            InlineKeyboardButton("üí™ –Ø —Ç—Ä–µ–Ω–µ—Ä", callback_data="role_trainer"),
            InlineKeyboardButton("üèÉ –Ø –∫–ª–∏–µ–Ω—Ç", callback_data="role_client")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trenergram! üéØ\n\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é *–ë–ï–°–ü–õ–ê–¢–ù–ê* –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
        f"–í—ã —Ç—Ä–µ–Ω–µ—Ä –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç?",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    help_text = """
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Trenergram*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/cabinet - üì± –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç
/my_link - üìé –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
/settings - ‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/support - —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

*–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:*
/my - –º–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

üí° *–°–æ–≤–µ—Ç:* –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–∞–±–∏–Ω–µ—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /cabinet

–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ Trenergram - *–ë–ï–°–ü–õ–ê–¢–ù–û* –¥–ª—è –≤—Å–µ—Ö! üöÄ
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /support command"""
    await update.message.reply_text(
        "üìû *–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Trenergram*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\n"
        "üìß Email: support@trenergram.ru\n"
        "üí¨ Telegram: @trenergram_support\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!",
        parse_mode='Markdown'
    )


def main():
    """Start the bot"""
    # Create the Application
    application = Application.builder().token(settings.BOT_TOKEN).build()

    # Common handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("support", support_command))

    # Registration handlers
    application.add_handler(CallbackQueryHandler(registration.handle_role_selection, pattern="^role_"))
    application.add_handler(CallbackQueryHandler(registration.handle_club_selection, pattern="^club_"))
    application.add_handler(CallbackQueryHandler(registration.handle_copy_link, pattern="^copy_link$"))

    # Main commands - simplified interface
    application.add_handler(CommandHandler("cabinet", webapp.cabinet_command))
    application.add_handler(CommandHandler("my_link", webapp.my_link_command))
    application.add_handler(CommandHandler("settings", webapp.settings_command))

    # Client commands (keep minimal)
    application.add_handler(CommandHandler("my", client.my_bookings_command))

    # Message handlers for registration flow
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, registration.handle_text_input))

    # Start the bot
    logger.info(f"Starting bot @{settings.BOT_USERNAME}...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()