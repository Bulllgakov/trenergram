from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from app.services import registration as reg_service
import asyncio


async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle role selection (trainer/client)"""
    query = update.callback_query
    await query.answer()

    if query.data == "role_trainer":
        await start_trainer_registration(update, context)
    elif query.data == "role_client":
        await start_client_registration_standalone(update, context)


async def start_trainer_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start trainer registration flow"""
    # Request contact with phone button
    contact_button = KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    reply_markup = ReplyKeyboardMarkup(
        [[contact_button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.callback_query.edit_message_text(
        "üí™ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞*\n\n"
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        parse_mode='Markdown'
    )

    await update.callback_query.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
        reply_markup=reply_markup
    )

    context.user_data['registration_step'] = 'trainer_contact'
    context.user_data['role'] = 'trainer'


async def start_client_registration(update: Update, context: ContextTypes.DEFAULT_TYPE, trainer_id: str = None):
    """Start client registration from trainer link"""
    context.user_data['registration_step'] = 'client_contact'
    context.user_data['role'] = 'client'
    context.user_data['trainer_id'] = trainer_id

    # Request contact with phone button
    contact_button = KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    reply_markup = ReplyKeyboardMarkup(
        [[contact_button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(
        "üèÉ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞*\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def start_client_registration_standalone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start standalone client registration"""
    await update.callback_query.edit_message_text(
        "üèÉ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ QR-–∫–æ–¥ –∫–ª—É–±–∞.\n\n"
        "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É –≤–∞—à–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ "
        "–æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –≤–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–µ.",
        parse_mode='Markdown'
    )


async def show_club_info(update: Update, context: ContextTypes.DEFAULT_TYPE, club_qr: str):
    """Show club info when user scans QR code"""
    # Load club info from database
    from app.db.session import SessionLocal
    from app.models import Club

    db = SessionLocal()
    try:
        club = db.query(Club).filter_by(qr_code=club_qr).first()
        if not club:
            await update.message.reply_text(
                "‚ùå –ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ QR-–∫–æ–¥.",
                parse_mode='Markdown'
            )
            return

        await update.message.reply_text(
            f"üè¢ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trenergram!*\n\n"
            f"–í—ã –≤ –∫–ª—É–±–µ: {club.name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {club.address}\n"
            f"‚è∞ –ì–æ—Ä–æ–¥: {club.city}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            parse_mode='Markdown'
        )
    finally:
        db.close()


async def handle_club_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle club selection during trainer registration"""
    query = update.callback_query
    await query.answer()

    if query.data == "club_private":
        # –¢—Ä–µ–Ω–µ—Ä –±–µ–∑ –∫–ª—É–±–∞ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–Ω–µ
        context.user_data['club_id'] = None
        await query.edit_message_text(
            "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ä—É–±–ª—è—Ö\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000)",
            parse_mode='Markdown'
        )
        context.user_data['registration_step'] = 'trainer_price'

    elif query.data == "club_list":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ –∏–∑ –ë–î
        clubs = reg_service.get_clubs()

        keyboard = []
        for club in clubs:
            keyboard.append([
                InlineKeyboardButton(club.name, callback_data=f"club_select_{club.id}")
            ])

        if not clubs:
            keyboard.append([
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—É–±", callback_data="club_add")
            ])

        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="club_back")
        ])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üè¢ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    elif query.data.startswith("club_select_"):
        # –í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—É–±
        club_id = query.data.replace("club_select_", "")
        context.user_data['club_id'] = club_id

        await query.edit_message_text(
            "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ä—É–±–ª—è—Ö\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 3000)",
            parse_mode='Markdown'
        )
        context.user_data['registration_step'] = 'trainer_price'


async def handle_specialization_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle specialization selection during trainer registration"""
    query = update.callback_query
    await query.answer()
    # TODO: Implement specialization selection logic


async def handle_copy_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle copy link button press"""
    query = update.callback_query
    trainer_id = update.effective_user.id
    trainer_link = f"https://t.me/{context.bot.username}?start=trainer_{trainer_id}"

    await query.answer(
        "üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.",
        show_alert=True
    )

    # Also send the link as a separate message for easy copying
    await query.message.reply_text(
        f"üìé *–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n\n`{trainer_link}`\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.",
        parse_mode='Markdown'
    )


async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle contact sharing during registration"""
    step = context.user_data.get('registration_step')

    if not step or not update.message.contact:
        return

    contact = update.message.contact

    # Store contact information
    context.user_data['phone'] = contact.phone_number
    context.user_data['first_name'] = contact.first_name or ""
    context.user_data['last_name'] = contact.last_name or ""
    # Create full name from contact
    full_name = f"{contact.first_name or ''}"
    if contact.last_name:
        full_name += f" {contact.last_name}"
    context.user_data['name'] = full_name.strip() or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # Remove keyboard
    await update.message.reply_text(
        "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!",
        reply_markup=ReplyKeyboardRemove()
    )

    if step == 'trainer_contact':
        # Ask for club
        keyboard = [
            [InlineKeyboardButton("üè¢ –í—ã–±—Ä–∞—Ç—å –∫–ª—É–±", callback_data="club_list")],
            [InlineKeyboardButton("üí™ –ë–µ–∑ –∫–ª—É–±–∞", callback_data="club_private")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–ì–¥–µ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?",
            reply_markup=reply_markup
        )
        context.user_data['registration_step'] = 'trainer_club'

    elif step == 'client_contact':
        await complete_client_registration(update, context)


async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input during registration flow"""
    step = context.user_data.get('registration_step')

    if not step:
        return

    text = update.message.text

    # Only handle price input for trainers now
    if step == 'trainer_price':
        try:
            price = int(text)
            context.user_data['price'] = price
            # Complete registration
            await complete_trainer_registration(update, context)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000)")


async def complete_trainer_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Complete trainer registration"""
    user = update.effective_user
    trainer_id = str(user.id)

    # Save to database
    try:
        trainer = await reg_service.register_trainer(
            telegram_id=trainer_id,
            telegram_username=user.username,
            telegram_first_name=context.user_data.get('first_name') or user.first_name,
            telegram_last_name=context.user_data.get('last_name') or user.last_name,
            name=context.user_data.get('name'),
            phone=context.user_data.get('phone'),
            price=context.user_data.get('price'),
            club_id=context.user_data.get('club_id')
        )
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )
        return

    trainer_link = f"https://t.me/{context.bot.username}?start=trainer_{trainer_id}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    from telegram import WebAppInfo
    keyboard = [
        [InlineKeyboardButton(
            "üì± –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞",
            web_app=WebAppInfo(url=f"https://trenergram.ru/app/trainer/{trainer_id}")
        )],
        [InlineKeyboardButton("üìé –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="copy_link")],
        [InlineKeyboardButton(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            web_app=WebAppInfo(url=f"https://trenergram.ru/app/trainer/{trainer_id}/settings")
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!*\n\n"
        f"üìé –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:\n`{trainer_link}`\n"
        "(–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n\n"
        "üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:*\n"
        "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–∞–±–∏–Ω–µ—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cabinet –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é *–ë–ï–°–ü–õ–ê–¢–ù–ê* –¥–ª—è –≤–∞—Å!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def complete_client_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Complete client registration"""
    user = update.effective_user
    client_id = str(user.id)
    trainer_id = context.user_data.get('trainer_id')

    # Save to database
    try:
        client = await reg_service.register_client(
            telegram_id=client_id,
            telegram_username=user.username,
            telegram_first_name=context.user_data.get('first_name') or user.first_name,
            telegram_last_name=context.user_data.get('last_name') or user.last_name,
            name=context.user_data.get('name'),
            phone=context.user_data.get('phone'),
            trainer_id=trainer_id
        )
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )
        return

    # Show WebApp buttons for client
    from telegram import WebAppInfo
    keyboard = [
        [InlineKeyboardButton(
            "üìÖ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            web_app=WebAppInfo(url=f"https://trenergram.ru/app/client/{client_id}")
        )],
        [InlineKeyboardButton(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            web_app=WebAppInfo(url=f"https://trenergram.ru/app/client/{client_id}/settings")
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )