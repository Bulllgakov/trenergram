from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes


async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle role selection (trainer/client)"""
    query = update.callback_query
    await query.answer()

    if query.data == "role_trainer":
        await start_trainer_registration(update, context)
    elif query.data == "role_client":
        await start_client_registration_standalone(update, context)


async def start_trainer_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start trainer registration flow"""
    await update.callback_query.edit_message_text(
        "üí™ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞*\n\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–≠—Ç–æ —É–≤–∏–¥—è—Ç –∫–ª–∏–µ–Ω—Ç—ã)",
        parse_mode='Markdown'
    )
    context.user_data['registration_step'] = 'trainer_name'
    context.user_data['role'] = 'trainer'


async def start_client_registration(update: Update, context: ContextTypes.DEFAULT_TYPE, trainer_id: str = None):
    """Start client registration from trainer link"""
    context.user_data['registration_step'] = 'client_name'
    context.user_data['role'] = 'client'
    context.user_data['trainer_id'] = trainer_id

    await update.message.reply_text(
        "üèÉ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞*\n\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        parse_mode='Markdown'
    )


async def start_client_registration_standalone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start standalone client registration"""
    await update.callback_query.edit_message_text(
        "üèÉ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ QR-–∫–æ–¥ –∫–ª—É–±–∞.\n\n"
        "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É –≤–∞—à–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ "
        "–æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –≤–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–µ.",
        parse_mode='Markdown'
    )


async def show_club_info(update: Update, context: ContextTypes.DEFAULT_TYPE, club_id: str):
    """Show club info when user scans QR code"""
    # TODO: Load club info from database
    await update.message.reply_text(
        "üè¢ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trenergram!*\n\n"
        f"–í—ã –≤ –∫–ª—É–±–µ: –§–∏—Ç–Ω–µ—Å –≠–ù–ï–†–ì–ò–Ø\n"
        f"üìç –ê–¥—Ä–µ—Å: —É–ª. –ü—É—à–∫–∏–Ω–∞ 15\n"
        f"‚è∞ –†–∞–±–æ—Ç–∞–µ–º: 07:00-23:00\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        parse_mode='Markdown'
    )


async def handle_club_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle club selection during trainer registration"""
    query = update.callback_query
    await query.answer()
    # TODO: Implement club selection logic


async def handle_specialization_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle specialization selection during trainer registration"""
    query = update.callback_query
    await query.answer()
    # TODO: Implement specialization selection logic


async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input during registration flow"""
    step = context.user_data.get('registration_step')

    if not step:
        return

    text = update.message.text

    if step == 'trainer_name':
        context.user_data['name'] = text
        # Ask for club
        keyboard = [
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="club_list")],
            [InlineKeyboardButton("–ß–∞—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä", callback_data="club_private")],
            [InlineKeyboardButton("–û–Ω–ª–∞–π–Ω", callback_data="club_online")],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—É–±", callback_data="club_new")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–ì–¥–µ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?",
            reply_markup=reply_markup
        )
        context.user_data['registration_step'] = 'trainer_club'

    elif step == 'trainer_price':
        try:
            price = int(text)
            context.user_data['price'] = price
            # Complete registration
            await complete_trainer_registration(update, context)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000)")

    elif step == 'client_name':
        context.user_data['name'] = text
        await complete_client_registration(update, context)


async def complete_trainer_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Complete trainer registration"""
    # TODO: Save to database
    trainer_id = update.effective_user.id
    trainer_link = f"https://t.me/{context.bot.username}?start=trainer_{trainer_id}"

    await update.message.reply_text(
        "‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!*\n\n"
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: `{trainer_link}`\n\n"
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ Trenergram –ø–æ–ª–Ω–æ—Å—Ç—å—é *–ë–ï–°–ü–õ–ê–¢–ù–ê* –¥–ª—è –≤–∞—Å!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode='Markdown'
    )


async def complete_client_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Complete client registration"""
    # TODO: Save to database
    await update.message.reply_text(
        "‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode='Markdown'
    )