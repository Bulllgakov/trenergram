from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes
from sqlalchemy import select

from app.db.base import async_session
from app.models.user import User, UserRole


async def cabinet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Open trainer's web app (mini app)"""
    user_id = update.effective_user.id
    telegram_id = str(user_id)
    trainer_link = f"https://t.me/{context.bot.username}?start=trainer_{user_id}"

    # Check user role from database
    async with async_session() as db:
        result = await db.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

    if not user:
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            parse_mode='Markdown'
        )
        return

    if user.role != UserRole.TRAINER:
        # Redirect to client cabinet
        await client_cabinet_command(update, context)
        return

    keyboard = [
        [InlineKeyboardButton(
            "üì± –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞",
            web_app=WebAppInfo(url=f"https://trenergram.ru/app/trainer/{user_id}")
        )],
        [InlineKeyboardButton("üìé –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="copy_link")],
        [InlineKeyboardButton(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            web_app=WebAppInfo(url=f"https://trenergram.ru/app/trainer/{user_id}/settings")
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üéØ *–ö–∞–±–∏–Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞*\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n\n"
        f"üìé –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n`{trainer_link}`",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def my_link_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show trainer's personal link for copying"""
    user_id = update.effective_user.id
    trainer_link = f"https://t.me/{context.bot.username}?start=trainer_{user_id}"

    keyboard = [
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                            url=f"https://t.me/share/url?url={trainer_link}&text=–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìé *–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n\n`{trainer_link}`\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤–∞–º –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Open settings in web app"""
    user_id = update.effective_user.id

    keyboard = [
        [InlineKeyboardButton(
            "‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            web_app=WebAppInfo(url=f"https://trenergram.ru/app/trainer/{user_id}/settings")
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def client_cabinet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Open client's web app (mini app)"""
    user_id = update.effective_user.id

    keyboard = [
        [InlineKeyboardButton(
            "üì± –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            web_app=WebAppInfo(url=f"https://trenergram.ru/app/client/{user_id}")
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üèÉ *–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.\n\n"
        "–í –∫–∞–±–∏–Ω–µ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –û—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )