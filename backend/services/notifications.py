"""
Telegram notification service for sending booking-related messages
"""

import asyncio
from typing import Optional
from datetime import datetime
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.orm import Session

from core.config import settings
from models import User, Booking, BookingStatus


class NotificationService:
    def __init__(self):
        self.bot = Bot(token=settings.BOT_TOKEN)

    async def send_booking_created_to_trainer(
        self,
        booking: Booking,
        trainer: User,
        client: User,
        db: Session
    ):
        """Send notification to trainer about new booking"""
        try:
            booking_date = booking.datetime.strftime("%d.%m.%Y")
            booking_time = booking.datetime.strftime("%H:%M")

            text = (
                "üÜï <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!</b>\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.name}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {booking_time}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n"
            )

            if booking.notes:
                text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking.notes}\n"

            text += "\n<i>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤ –≤–∞—à–µ–º Mini App</i>"

            # Create inline keyboard with actions
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"confirm_booking:{booking.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=f"cancel_booking:{booking.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üì± –û—Ç–∫—Ä—ã—Ç—å Mini App",
                        web_app={"url": f"https://trenergram.ru/trainer/{trainer.telegram_id}"}
                    )
                ]
            ])

            await self.bot.send_message(
                chat_id=trainer.telegram_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

            return True
        except Exception as e:
            print(f"Error sending notification to trainer: {e}")
            return False

    async def send_booking_created_to_client(
        self,
        booking: Booking,
        trainer: User,
        client: User,
        db: Session
    ):
        """Send confirmation to client about booking creation"""
        try:
            booking_date = booking.datetime.strftime("%d.%m.%Y")
            booking_time = booking.datetime.strftime("%H:%M")

            text = (
                "‚úÖ <b>–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer.name}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {booking_time}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n"
                f"üìç –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞\n\n"
                "<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ç—Ä–µ–Ω–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞–ø–∏—Å—å</i>"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏",
                        web_app={"url": f"https://trenergram.ru/client/{client.telegram_id}"}
                    )
                ]
            ])

            await self.bot.send_message(
                chat_id=client.telegram_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

            return True
        except Exception as e:
            print(f"Error sending notification to client: {e}")
            return False

    async def send_booking_confirmed(
        self,
        booking: Booking,
        trainer: User,
        client: User,
        db: Session
    ):
        """Send confirmation notification to client"""
        try:
            booking_date = booking.datetime.strftime("%d.%m.%Y")
            booking_time = booking.datetime.strftime("%H:%M")

            text = (
                "‚úÖ <b>–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer.name}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {booking_time}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n\n"
                "<i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –≤–æ–≤—Ä–µ–º—è!</i>"
            )

            await self.bot.send_message(
                chat_id=client.telegram_id,
                text=text,
                parse_mode="HTML"
            )

            return True
        except Exception as e:
            print(f"Error sending confirmation to client: {e}")
            return False

    async def send_booking_cancelled(
        self,
        booking: Booking,
        trainer: User,
        client: User,
        reason: Optional[str] = None,
        cancelled_by: str = "trainer"
    ):
        """Send cancellation notification"""
        try:
            booking_date = booking.datetime.strftime("%d.%m.%Y")
            booking_time = booking.datetime.strftime("%H:%M")

            if cancelled_by == "trainer":
                # Notification to client
                text = (
                    "‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º</b>\n\n"
                    f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer.name}\n"
                    f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {booking_time}\n"
                )

                if reason:
                    text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"

                text += "\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è</i>"

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üì± –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞",
                            web_app={"url": f"https://trenergram.ru/client/{client.telegram_id}"}
                        )
                    ]
                ])

                await self.bot.send_message(
                    chat_id=client.telegram_id,
                    text=text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )

            else:
                # Notification to trainer
                text = (
                    "‚ùå <b>–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å</b>\n\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.name}\n"
                    f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {booking_time}\n"
                )

                if reason:
                    text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"

                text += "\n<i>–≠—Ç–æ –≤—Ä–µ–º—è —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</i>"

                await self.bot.send_message(
                    chat_id=trainer.telegram_id,
                    text=text,
                    parse_mode="HTML"
                )

            return True
        except Exception as e:
            print(f"Error sending cancellation notification: {e}")
            return False

    async def send_booking_rescheduled(
        self,
        booking: Booking,
        old_datetime: datetime,
        trainer: User,
        client: User,
        rescheduled_by: str = "trainer"
    ):
        """Send reschedule notification"""
        try:
            old_date = old_datetime.strftime("%d.%m.%Y")
            old_time = old_datetime.strftime("%H:%M")
            new_date = booking.datetime.strftime("%d.%m.%Y")
            new_time = booking.datetime.strftime("%H:%M")

            if rescheduled_by == "trainer":
                # Notification to client
                text = (
                    "üîÑ <b>–ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º</b>\n\n"
                    f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer.name}\n\n"
                    f"‚ùå –°—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è:\n"
                    f"üìÖ {old_date} –≤ {old_time}\n\n"
                    f"‚úÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è:\n"
                    f"üìÖ {new_date} –≤ {new_time}\n\n"
                    "<i>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è</i>"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
                            callback_data=f"accept_reschedule:{booking.id}"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç",
                            callback_data=f"decline_reschedule:{booking.id}"
                        )
                    ]
                ])

                await self.bot.send_message(
                    chat_id=client.telegram_id,
                    text=text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )

            else:
                # Notification to trainer
                text = (
                    "üîÑ <b>–ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–Ω–µ—Å –∑–∞–ø–∏—Å—å</b>\n\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.name}\n\n"
                    f"‚ùå –°—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è:\n"
                    f"üìÖ {old_date} –≤ {old_time}\n\n"
                    f"‚úÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è:\n"
                    f"üìÖ {new_date} –≤ {new_time}\n\n"
                    "<i>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</i>"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                            callback_data=f"confirm_booking:{booking.id}"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                            callback_data=f"cancel_booking:{booking.id}"
                        )
                    ]
                ])

                await self.bot.send_message(
                    chat_id=trainer.telegram_id,
                    text=text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )

            return True
        except Exception as e:
            print(f"Error sending reschedule notification: {e}")
            return False

    async def send_reminder_to_client(
        self,
        booking: Booking,
        trainer: User,
        client: User,
        hours_before: int = 24
    ):
        """Send reminder to client about upcoming training"""
        try:
            booking_date = booking.datetime.strftime("%d.%m.%Y")
            booking_time = booking.datetime.strftime("%H:%M")

            if hours_before >= 24:
                time_text = f"—á–µ—Ä–µ–∑ {hours_before // 24} –¥–Ω."
            else:
                time_text = f"—á–µ—Ä–µ–∑ {hours_before} —á."

            text = (
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ {time_text}</b>\n\n"
                f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer.name}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {booking_time}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n\n"
                "<i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É!</i>"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–∏–¥—É",
                        callback_data=f"confirm_attendance:{booking.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=f"cancel_booking:{booking.id}"
                    )
                ]
            ])

            await self.bot.send_message(
                chat_id=client.telegram_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

            return True
        except Exception as e:
            print(f"Error sending reminder: {e}")
            return False

    async def close(self):
        """Close bot session"""
        await self.bot.session.close()


# Global instance
notification_service = NotificationService()


# Helper functions for use in API endpoints
# DEPRECATED: This function violates TZ 10.6 and should not be used
# Use notify_booking_created_by_trainer() or notify_booking_created_by_client() instead
# async def notify_booking_created(booking: Booking, db: Session):
#     """DEPRECATED: Sends notifications to BOTH trainer and client - violates TZ 10.6"""
#     pass


async def notify_booking_confirmed(booking: Booking, db: Session):
    """Helper to send notification when booking is confirmed"""
    trainer = db.query(User).filter_by(id=booking.trainer_id).first()
    client = db.query(User).filter_by(id=booking.client_id).first()

    if trainer and client:
        await notification_service.send_booking_confirmed(booking, trainer, client, db)


async def notify_booking_cancelled(
    booking: Booking,
    db: Session,
    reason: Optional[str] = None,
    cancelled_by_trainer: bool = True
):
    """Helper to send notification when booking is cancelled"""
    trainer = db.query(User).filter_by(id=booking.trainer_id).first()
    client = db.query(User).filter_by(id=booking.client_id).first()

    if trainer and client:
        await notification_service.send_booking_cancelled(
            booking, trainer, client, reason,
            "trainer" if cancelled_by_trainer else "client"
        )


async def notify_booking_rescheduled(
    booking: Booking,
    old_datetime: datetime,
    db: Session,
    rescheduled_by_trainer: bool = True
):
    """Helper to send notification when booking is rescheduled"""
    trainer = db.query(User).filter_by(id=booking.trainer_id).first()
    client = db.query(User).filter_by(id=booking.client_id).first()

    if trainer and client:
        await notification_service.send_booking_rescheduled(
            booking, old_datetime, trainer, client,
            "trainer" if rescheduled_by_trainer else "client"
        )


# New simplified notification functions according to TZ 10.6
async def notify_booking_created_by_trainer(booking: Booking, db: Session):
    """
    When trainer creates booking: NO notifications sent to anyone.
    First reminder will serve as first notification to client.
    """
    # According to new TZ 10.6: no notifications when trainer creates booking
    print(f"üö´ notify_booking_created_by_trainer() called for booking {booking.id}")
    print(f"üö´ NO notifications will be sent (correct per TZ 10.6)")
    pass


async def notify_booking_created_by_client(booking: Booking, db: Session):
    """
    When client creates booking: send notification to trainer for confirmation.
    """
    print(f"üìß notify_booking_created_by_client() called for booking {booking.id}")
    print(f"üìß Will send notification to TRAINER for approval")

    trainer = db.query(User).filter_by(id=booking.trainer_id).first()
    client = db.query(User).filter_by(id=booking.client_id).first()

    if trainer and client:
        print(f"üìß Sending notification to trainer {trainer.telegram_id}")
        # Only send notification to trainer for approval
        await notification_service.send_booking_created_to_trainer(booking, trainer, client, db)

        # Send confirmation to client about request creation
        try:
            booking_date = booking.datetime.strftime("%d.%m.%Y")
            booking_time = booking.datetime.strftime("%H:%M")

            text = (
                "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer.name}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {booking_time}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n\n"
                "<i>–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞</i>"
            )

            await notification_service.bot.send_message(
                chat_id=client.telegram_id,
                text=text,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"Error sending client request confirmation: {e}")