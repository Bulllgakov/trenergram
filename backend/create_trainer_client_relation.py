#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç—Ä–µ–Ω–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
sys.path.append('.')

from db.base import async_session
from models.user_v2 import User, UserRole, TrainerClient
from sqlalchemy import select
from datetime import datetime

async def create_trainer_client_relation():
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç—Ä–µ–Ω–µ—Ä–æ–º 236692046 –∏ –∫–ª–∏–µ–Ω—Ç–æ–º 8384084241"""
    trainer_telegram_id = "236692046"
    client_telegram_id = "8384084241"

    print(f"=== –°–û–ó–î–ê–ù–ò–ï –°–í–Ø–ó–ò –¢–†–ï–ù–ï–†-–ö–õ–ò–ï–ù–¢ ===")
    print(f"–¢—Ä–µ–Ω–µ—Ä: {trainer_telegram_id}")
    print(f"–ö–ª–∏–µ–Ω—Ç: {client_telegram_id}")

    async with async_session() as session:
        try:
            # –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
            trainer_result = await session.execute(
                select(User).where(
                    User.telegram_id == trainer_telegram_id,
                    User.role == UserRole.TRAINER
                )
            )
            trainer = trainer_result.scalar_one_or_none()

            # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
            client_result = await session.execute(
                select(User).where(
                    User.telegram_id == client_telegram_id,
                    User.role == UserRole.CLIENT
                )
            )
            client = client_result.scalar_one_or_none()

            if not trainer:
                print(f"‚ùå –û–®–ò–ë–ö–ê: –¢—Ä–µ–Ω–µ—Ä {trainer_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False

            if not client:
                print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–ª–∏–µ–Ω—Ç {client_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False

            print(f"‚úÖ –¢—Ä–µ–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω: {trainer.name} (ID: {trainer.id})")
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {client.name} (ID: {client.id})")

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å
            existing_relation = await session.execute(
                select(TrainerClient).where(
                    TrainerClient.trainer_id == trainer.id,
                    TrainerClient.client_id == client.id
                )
            )
            existing = existing_relation.scalar_one_or_none()

            if existing:
                if existing.is_active:
                    print(f"‚úÖ –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞ (ID: {existing.id})")
                    return True
                else:
                    # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å
                    existing.is_active = True
                    existing.updated_at = datetime.utcnow()
                    await session.commit()
                    print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–≤—è–∑—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (ID: {existing.id})")
                    return True

            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑—å
            new_relation = TrainerClient(
                trainer_id=trainer.id,
                client_id=client.id,
                is_active=True,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )

            session.add(new_relation)
            await session.commit()
            await session.refresh(new_relation)

            print(f"‚úÖ –£–°–ü–ï–®–ù–û: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-–∫–ª–∏–µ–Ω—Ç (ID: {new_relation.id})")
            print(f"   - –¢—Ä–µ–Ω–µ—Ä ID: {trainer.id} ({trainer.name})")
            print(f"   - –ö–ª–∏–µ–Ω—Ç ID: {client.id} ({client.name})")
            print(f"   - –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–∞")
            print(f"   - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {new_relation.created_at}")

            return True

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏: {e}")
            import traceback
            traceback.print_exc()
            await session.rollback()
            return False

async def verify_relation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–≤—è–∑—å"""
    trainer_telegram_id = "236692046"
    client_telegram_id = "8384084241"

    print(f"\n=== –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–û–ô –°–í–Ø–ó–ò ===")

    async with async_session() as session:
        try:
            # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            trainer_result = await session.execute(
                select(User).where(User.telegram_id == trainer_telegram_id)
            )
            trainer = trainer_result.scalar_one_or_none()

            client_result = await session.execute(
                select(User).where(User.telegram_id == client_telegram_id)
            )
            client = client_result.scalar_one_or_none()

            if not trainer or not client:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å
            relation_result = await session.execute(
                select(TrainerClient).where(
                    TrainerClient.trainer_id == trainer.id,
                    TrainerClient.client_id == client.id,
                    TrainerClient.is_active == True
                )
            )
            relation = relation_result.scalar_one_or_none()

            if relation:
                print(f"‚úÖ –°–í–Ø–ó–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:")
                print(f"   - ID —Å–≤—è–∑–∏: {relation.id}")
                print(f"   - –¢—Ä–µ–Ω–µ—Ä: {trainer.name} (TG: {trainer.telegram_id})")
                print(f"   - –ö–ª–∏–µ–Ω—Ç: {client.name} (TG: {client.telegram_id})")
                print(f"   - –ê–∫—Ç–∏–≤–Ω–∞: {relation.is_active}")
                print(f"   - –°–æ–∑–¥–∞–Ω–∞: {relation.created_at}")
                return True
            else:
                print("‚ùå –°–í–Ø–ó–¨ –ù–ï –ù–ê–ô–î–ï–ù–ê")
                return False

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê –°–û–ó–î–ê–ù–ò–Ø –°–í–Ø–ó–ò –¢–†–ï–ù–ï–†-–ö–õ–ò–ï–ù–¢")
    print("=" * 50)

    # –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å
    success = await create_trainer_client_relation()

    if success:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–≤—è–∑—å
        await verify_relation()
        print("\nüéâ –°–ö–†–ò–ü–¢ –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Mini App:")
        print("   - –¢—Ä–µ–Ω–µ—Ä 236692046 –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã'")
        print("   - –ö–ª–∏–µ–Ω—Ç 8384084241 –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ —Å–≤–æ–µ–º —Å–ø–∏—Å–∫–µ")
    else:
        print("\n‚ùå –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())