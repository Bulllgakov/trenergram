#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç—Ä–µ–Ω–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º
–ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç ORM –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import sys
import os
sys.path.append('.')

from db.base import async_session
from sqlalchemy import text
from datetime import datetime

async def create_trainer_client_relation_sql():
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç—Ä–µ–Ω–µ—Ä–æ–º 236692046 –∏ –∫–ª–∏–µ–Ω—Ç–æ–º 8384084241 —á–µ—Ä–µ–∑ SQL"""
    trainer_telegram_id = "236692046"
    client_telegram_id = "8384084241"

    print(f"=== –°–û–ó–î–ê–ù–ò–ï –°–í–Ø–ó–ò –¢–†–ï–ù–ï–†-–ö–õ–ò–ï–ù–¢ –ß–ï–†–ï–ó SQL ===")
    print(f"–¢—Ä–µ–Ω–µ—Ä: {trainer_telegram_id}")
    print(f"–ö–ª–∏–µ–Ω—Ç: {client_telegram_id}")

    async with async_session() as session:
        try:
            # –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
            trainer_result = await session.execute(text("""
                SELECT id, name, role FROM users
                WHERE telegram_id = :telegram_id AND role = 'TRAINER'
            """), {"telegram_id": trainer_telegram_id})
            trainer = trainer_result.fetchone()

            # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
            client_result = await session.execute(text("""
                SELECT id, name, role FROM users
                WHERE telegram_id = :telegram_id AND role = 'CLIENT'
            """), {"telegram_id": client_telegram_id})
            client = client_result.fetchone()

            if not trainer:
                print(f"‚ùå –û–®–ò–ë–ö–ê: –¢—Ä–µ–Ω–µ—Ä {trainer_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False

            if not client:
                print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–ª–∏–µ–Ω—Ç {client_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False

            trainer_id = trainer[0]
            trainer_name = trainer[1]
            client_id = client[0]
            client_name = client[1]

            print(f"‚úÖ –¢—Ä–µ–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω: {trainer_name} (ID: {trainer_id})")
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {client_name} (ID: {client_id})")

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å
            existing_result = await session.execute(text("""
                SELECT id, is_active FROM trainer_clients
                WHERE trainer_id = :trainer_id AND client_id = :client_id
            """), {"trainer_id": trainer_id, "client_id": client_id})
            existing = existing_result.fetchone()

            if existing:
                relation_id = existing[0]
                is_active = existing[1]
                if is_active:
                    print(f"‚úÖ –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞ (ID: {relation_id})")
                    return True
                else:
                    # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å
                    await session.execute(text("""
                        UPDATE trainer_clients
                        SET is_active = true, updated_at = :updated_at
                        WHERE id = :relation_id
                    """), {"relation_id": relation_id, "updated_at": datetime.utcnow()})
                    await session.commit()
                    print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–≤—è–∑—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (ID: {relation_id})")
                    return True

            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑—å
            await session.execute(text("""
                INSERT INTO trainer_clients
                (trainer_id, client_id, is_active, created_at, updated_at, source, total_bookings, completed_bookings, cancelled_bookings, balance)
                VALUES (:trainer_id, :client_id, true, :created_at, :updated_at, 'manual', 0, 0, 0, 0)
            """), {
                "trainer_id": trainer_id,
                "client_id": client_id,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow()
            })

            await session.commit()

            # –ü–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–≤—è–∑–∏
            new_relation_result = await session.execute(text("""
                SELECT id FROM trainer_clients
                WHERE trainer_id = :trainer_id AND client_id = :client_id AND is_active = true
                ORDER BY created_at DESC LIMIT 1
            """), {"trainer_id": trainer_id, "client_id": client_id})
            new_relation = new_relation_result.fetchone()
            new_relation_id = new_relation[0] if new_relation else "Unknown"

            print(f"‚úÖ –£–°–ü–ï–®–ù–û: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-–∫–ª–∏–µ–Ω—Ç (ID: {new_relation_id})")
            print(f"   - –¢—Ä–µ–Ω–µ—Ä ID: {trainer_id} ({trainer_name})")
            print(f"   - –ö–ª–∏–µ–Ω—Ç ID: {client_id} ({client_name})")
            print(f"   - –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–∞")

            return True

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏: {e}")
            import traceback
            traceback.print_exc()
            await session.rollback()
            return False

async def verify_relation_sql():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ SQL"""
    trainer_telegram_id = "236692046"
    client_telegram_id = "8384084241"

    print(f"\n=== –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–û–ô –°–í–Ø–ó–ò ===")

    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å
            result = await session.execute(text("""
                SELECT tc.id, tc.is_active, tc.created_at,
                       u1.name as trainer_name, u1.telegram_id as trainer_tg,
                       u2.name as client_name, u2.telegram_id as client_tg
                FROM trainer_clients tc
                JOIN users u1 ON tc.trainer_id = u1.id
                JOIN users u2 ON tc.client_id = u2.id
                WHERE u1.telegram_id = :trainer_tg AND u2.telegram_id = :client_tg AND tc.is_active = true
            """), {"trainer_tg": trainer_telegram_id, "client_tg": client_telegram_id})

            relation = result.fetchone()

            if relation:
                print(f"‚úÖ –°–í–Ø–ó–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:")
                print(f"   - ID —Å–≤—è–∑–∏: {relation[0]}")
                print(f"   - –¢—Ä–µ–Ω–µ—Ä: {relation[3]} (TG: {relation[4]})")
                print(f"   - –ö–ª–∏–µ–Ω—Ç: {relation[5]} (TG: {relation[6]})")
                print(f"   - –ê–∫—Ç–∏–≤–Ω–∞: {relation[1]}")
                print(f"   - –°–æ–∑–¥–∞–Ω–∞: {relation[2]}")
                return True
            else:
                print("‚ùå –°–í–Ø–ó–¨ –ù–ï –ù–ê–ô–î–ï–ù–ê")
                return False

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö SQL –°–ö–†–ò–ü–¢–ê –°–û–ó–î–ê–ù–ò–Ø –°–í–Ø–ó–ò –¢–†–ï–ù–ï–†-–ö–õ–ò–ï–ù–¢")
    print("=" * 50)

    # –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å
    success = await create_trainer_client_relation_sql()

    if success:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–≤—è–∑—å
        await verify_relation_sql()
        print("\nüéâ –°–ö–†–ò–ü–¢ –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Mini App:")
        print("   - –¢—Ä–µ–Ω–µ—Ä 236692046 –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã'")
        print("   - –ö–ª–∏–µ–Ω—Ç 8384084241 –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ —Å–≤–æ–µ–º —Å–ø–∏—Å–∫–µ")
    else:
        print("\n‚ùå –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())