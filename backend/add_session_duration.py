#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ session_duration –≤ —Ç–∞–±–ª–∏—Ü—É users –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î
"""

import asyncio
import sys
import os
sys.path.append('.')

from db.base import async_session
from sqlalchemy import text

async def add_session_duration_column():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ session_duration –≤ —Ç–∞–±–ª–∏—Ü—É users"""
    print("=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–Ø session_duration ===")

    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ session_duration
            result = await session.execute(text("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = 'users' AND column_name = 'session_duration'
            """))
            existing = result.fetchone()

            if existing:
                print("‚úÖ –ü–æ–ª–µ session_duration —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True

            # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ session_duration
            print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ session_duration...")
            await session.execute(text("""
                ALTER TABLE users
                ADD COLUMN session_duration INTEGER DEFAULT 60
            """))

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
            print("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤...")
            result = await session.execute(text("""
                UPDATE users
                SET session_duration = 60
                WHERE role = 'TRAINER' AND session_duration IS NULL
            """))

            await session.commit()

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            updated_count = result.rowcount
            print(f"‚úÖ –ü–æ–ª–µ session_duration –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤: {updated_count}")

            return True

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è: {e}")
            import traceback
            traceback.print_exc()
            await session.rollback()
            return False

async def verify_session_duration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø session_duration ===")

    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            result = await session.execute(text("""
                SELECT column_name, data_type, column_default, is_nullable
                FROM information_schema.columns
                WHERE table_name = 'users' AND column_name = 'session_duration'
            """))
            column_info = result.fetchone()

            if column_info:
                print("‚úÖ –ü–æ–ª–µ session_duration –Ω–∞–π–¥–µ–Ω–æ:")
                print(f"   - –¢–∏–ø: {column_info[1]}")
                print(f"   - –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {column_info[2]}")
                print(f"   - –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL: {column_info[3]}")
            else:
                print("‚ùå –ü–æ–ª–µ session_duration –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
            result = await session.execute(text("""
                SELECT telegram_id, name, session_duration
                FROM users
                WHERE role = 'TRAINER'
            """))
            trainers = result.fetchall()

            print(f"\n–¢—Ä–µ–Ω–µ—Ä—ã —Å session_duration:")
            for trainer in trainers:
                duration = trainer[2] if trainer[2] is not None else "NULL"
                print(f"   - {trainer[1]} (TG: {trainer[0]}): {duration} –º–∏–Ω")

            return True

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–Ø session_duration –í –ü–†–û–î–ê–ö–®–ù –ë–î")
    print("=" * 55)

    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ
    success = await add_session_duration_column()

    if success:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await verify_session_duration()
        print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("üí° –¢–µ–ø–µ—Ä—å API –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫")
    else:
        print("\n‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ò–õ–ê–°–¨ –° –û–®–ò–ë–ö–û–ô")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())